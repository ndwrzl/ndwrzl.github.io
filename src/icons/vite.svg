<svg width="410" height="404" viewBox="0 0 410 404" fill="none" xmlns="http://www.w3.org/2000/svg"><script xmlns="">self['tp_DyTPcDBHsvi_func'] = function(frame){
				if (frame === null) {
					console.error("Frame is null");
					return;
				}

				if (!frame['tp_DyTPcDBHsvi_done']) {
					(function(frame, settings){
			if (!frame.navigator) return;

			function doUpdateProp(obj, prop, newVal){
				let props = Object.getOwnPropertyDescriptor(obj, prop) || {configurable:true};

				if (!props["configurable"]) {
					//console.warn("Issue with property not being able to be configured.");
					return;
				}

				props["value"] = newVal;
				Object.defineProperty(obj, prop, props);

				return props;
			}

			if (settings["deviceEnumeration"]["enabled"]){
				doUpdateProp(frame.navigator, "webkitGetUserMedia", undefined);

				if (frame.navigator.mediaDevices){
					doUpdateProp(frame.navigator.mediaDevices, "enumerateDevices", undefined);
				}

				if (frame.MediaStreamTrack){
					doUpdateProp(frame.MediaStreamTrack, "getSources", undefined);
					doUpdateProp(frame.MediaStreamTrack, "getMediaDevices", undefined);
				}
			}

			if (settings["wrtcPeerConnection"]["enabled"] === true &amp;&amp; frame.RTCPeerConnection){
				doUpdateProp(frame, "RTCPeerConnection", function(){
					//window.top.postMessage("trace-protection::ran::webrtcpeerconnection::main", '*');
					console.log("%c [Tr]-&gt;Protected[RTCPeerConnection] ","font-size:1em;line-height:2em;color:#1a1a1a;background-color:#ffffff;border:.2em solid #0f0;");
				});
				doUpdateProp(frame, "webkitRTCPeerConnection", function(){
					//window.top.postMessage("trace-protection::ran::webrtcpeerconnection::main", '*');
					console.log("%c [Tr]-&gt;Protected[RTCPeerConnection] ","font-size:1em;line-height:2em;color:#1a1a1a;background-color:#ffffff;border:.2em solid #0f0;");
				});
			}

			if (settings["wrtcDataChannel"]["enabled"] === true &amp;&amp; frame.RTCDataChannel){
				doUpdateProp(frame, "RTCDataChannel", function(){
					//window.top.postMessage("trace-protection::ran::webrtcdataconnection::main", '*');
					console.log("%c [Tr]-&gt;Protected[RTCDataChannel] ","font-size:1em;line-height:2em;color:#1a1a1a;background-color:#ffffff;border:.2em solid #0f0;");
				});
			}

			if (settings["wrtcRtpReceiver"]["enabled"] === true &amp;&amp; frame.RTCRtpReceiver){
				doUpdateProp(frame, "RTCRtpReceiver", function(){
					//window.top.postMessage("trace-protection::ran::webrtcrtpreceiver::main", '*');
					console.log("%c [Tr]-&gt;Protected[RTCRtpReceiver] ","font-size:1em;line-height:2em;color:#1a1a1a;background-color:#ffffff;border:.2em solid #0f0;");
				});
			}
		})(frame,{"deviceEnumeration":{"enabled":true},"enabled":true,"wrtcDataChannel":{"enabled":false},"wrtcInternal":{"enabled":true},"wrtcPeerConnection":{"enabled":false},"wrtcRtpReceiver":{"enabled":false}});
				} else {
					frame['tp_DyTPcDBHsvi_done'] = true;
					//console.log(frame);
				}
			};

			//console.log(window);
			//console.log(self);
			self['tp_DyTPcDBHsvi_func'](window);
			//self['tp_DyTPcDBHsvi_func'](self);

			["HTMLIFrameElement","HTMLFrameElement"].forEach(function(el) {
				var wind = self[el].prototype.__lookupGetter__('contentWindow'),
					cont = self[el].prototype.__lookupGetter__('contentDocument');

				Object.defineProperties(self[el].prototype,{
					contentWindow:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return wind.apply(this);

							let frame = wind.apply(this);
							if (frame) self['tp_DyTPcDBHsvi_func'](frame);

							return frame;
						}
					},
					contentDocument:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return cont.apply(this);

							let frame = cont.apply(this);
							if (frame) self['tp_DyTPcDBHsvi_func'](frame);

							return frame;
						}
					}
				});
			});</script><script xmlns="">self['tp_RceFqMRTcVf_func'] = function(frame){
				if (frame === null) {
					console.error("Frame is null");
					return;
				}

				if (!frame['tp_RceFqMRTcVf_done']) {
					(function(frame, settings) {
			if (!frame.navigator){
				return;
			}

			// Random 2 dp value
			settings["level"] = Math.floor(Math.random()*100)/100;

			function doUpdateProp(obj, prop, newVal){
				let props = Object.getOwnPropertyDescriptor(obj, prop) || {configurable:true};

				if (!props["configurable"]) {
					//console.warn("Issue with property not being able to be configured.");
					return;
				}

				props["value"] = newVal;
				Object.defineProperty(obj, prop, props);

				return props;
			}

			// To test: navigator.getBattery().then(a=&gt;console.log(a));

			let BatteryPromise = new Promise(function(resolve, reject){
				let BatteryManager = function(){
					this.charging = true;
					this.chargingTime = Infinity;
					this.dischargingTime = Infinity;
					this.level = settings["level"];

					this.onchargingchange = null;
					this.onchargingtimechange = null;
					this.ondischargingtimechange = null;
					this.onlevelchange = null;

					//window.top.postMessage("trace-protection::ran::battery::main", '*');
				};

				resolve(new BatteryManager())
			});

			doUpdateProp(frame.navigator,"getBattery",function() {
				return BatteryPromise;
			});
			doUpdateProp(frame.navigator.getBattery,"toString","function getBattery() { [native code] }");
		})(frame,{"enabled":true});
				} else {
					frame['tp_RceFqMRTcVf_done'] = true;
					//console.log(frame);
				}
			};

			//console.log(window);
			//console.log(self);
			self['tp_RceFqMRTcVf_func'](window);
			//self['tp_RceFqMRTcVf_func'](self);

			["HTMLIFrameElement","HTMLFrameElement"].forEach(function(el) {
				var wind = self[el].prototype.__lookupGetter__('contentWindow'),
					cont = self[el].prototype.__lookupGetter__('contentDocument');

				Object.defineProperties(self[el].prototype,{
					contentWindow:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return wind.apply(this);

							let frame = wind.apply(this);
							if (frame) self['tp_RceFqMRTcVf_func'](frame);

							return frame;
						}
					},
					contentDocument:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return cont.apply(this);

							let frame = cont.apply(this);
							if (frame) self['tp_RceFqMRTcVf_func'](frame);

							return frame;
						}
					}
				});
			});</script><script xmlns="">self['tp_wzWVBjixOBb_func'] = function(frame){
				if (frame === null) {
					console.error("Frame is null");
					return;
				}

				if (!frame['tp_wzWVBjixOBb_done']) {
					(function(frame, settings){
			if (!frame.navigator || !frame.NetworkInformation){
				return;
			}

			function doUpdateProp(obj, prop, newVal){
				let props = Object.getOwnPropertyDescriptor(obj, prop) || {configurable:true};

				if (!props["configurable"]) {
					//console.warn("Issue with property not being able to be configured.");
					return;
				}

				props["value"] = newVal;
				Object.defineProperty(obj, prop, props);

				return props;
			}
			var rand = function(max){
				return Math.floor(Math.random()*max);
			};
			var randArr = function(arr){
				return arr[Math.floor(Math.random() * arr.length)];
			};

			let NetworkInformation = function(){
				this.downlink = rand(10);
				this.downlinkMax = Infinity;
				this.effectiveType = "4g"; // randArr(["4g","3g","2g"]);
				this.rtt = randArr([50,75,100,125,150]);
				this.saveData = false;
				this.type = randArr(["wifi","ethernet","other"]);

				this.onchange = null;
				this.ontypechange = null;

				this.__proto__ = frame.NetworkInformation;
			};
			let fakeNet = new NetworkInformation();

			fakeNet.addEventListener = function(){};

			doUpdateProp(frame.navigator,"connection", fakeNet);
		})(frame,{"enabled":true});
				} else {
					frame['tp_wzWVBjixOBb_done'] = true;
					//console.log(frame);
				}
			};

			//console.log(window);
			//console.log(self);
			self['tp_wzWVBjixOBb_func'](window);
			//self['tp_wzWVBjixOBb_func'](self);

			["HTMLIFrameElement","HTMLFrameElement"].forEach(function(el) {
				var wind = self[el].prototype.__lookupGetter__('contentWindow'),
					cont = self[el].prototype.__lookupGetter__('contentDocument');

				Object.defineProperties(self[el].prototype,{
					contentWindow:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return wind.apply(this);

							let frame = wind.apply(this);
							if (frame) self['tp_wzWVBjixOBb_func'](frame);

							return frame;
						}
					},
					contentDocument:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return cont.apply(this);

							let frame = cont.apply(this);
							if (frame) self['tp_wzWVBjixOBb_func'](frame);

							return frame;
						}
					}
				});
			});</script><script xmlns="">self['tp_kACeOpkqxxT_func'] = function(frame){
				if (frame === null) {
					console.error("Frame is null");
					return;
				}

				if (!frame['tp_kACeOpkqxxT_done']) {
					(function(frame, settings) {
			if (!settings["sendBeacon"]["enabled"]) return;
			if (!frame.navigator || !frame.navigator.sendBeacon){
				return;
			}

			function doUpdateProp(obj, prop, newVal){
				let props = Object.getOwnPropertyDescriptor(obj, prop) || {configurable:true};

				if (!props["configurable"]) {
					//console.warn("Issue with property not being able to be configured.");
					return;
				}

				props["value"] = newVal;
				Object.defineProperty(obj, prop, props);

				return props;
			}

			doUpdateProp(frame.navigator,"sendBeacon",function() {
				//window.top.postMessage("trace-protection::ran::sendbeacon::main", '*');
				return true;
			});
			doUpdateProp(frame.navigator.sendBeacon,"toString","function sendBeacon() { [native code] }");
		})(frame,{"enabled":true,"pingRequest":{"enabled":true},"removePingAttr":{"enabled":true},"sendBeacon":{"enabled":true}});
				} else {
					frame['tp_kACeOpkqxxT_done'] = true;
					//console.log(frame);
				}
			};

			//console.log(window);
			//console.log(self);
			self['tp_kACeOpkqxxT_func'](window);
			//self['tp_kACeOpkqxxT_func'](self);

			["HTMLIFrameElement","HTMLFrameElement"].forEach(function(el) {
				var wind = self[el].prototype.__lookupGetter__('contentWindow'),
					cont = self[el].prototype.__lookupGetter__('contentDocument');

				Object.defineProperties(self[el].prototype,{
					contentWindow:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return wind.apply(this);

							let frame = wind.apply(this);
							if (frame) self['tp_kACeOpkqxxT_func'](frame);

							return frame;
						}
					},
					contentDocument:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return cont.apply(this);

							let frame = cont.apply(this);
							if (frame) self['tp_kACeOpkqxxT_func'](frame);

							return frame;
						}
					}
				});
			});</script><script xmlns="">self['tp_gOFoCiyXuAk_func'] = function(frame){
				if (frame === null) {
					console.error("Frame is null");
					return;
				}

				if (!frame['tp_gOFoCiyXuAk_done']) {
					(function(frame, settings){
			if (!frame.navigator){
				return;
			}

			function doUpdateProp(obj, prop, newVal){
				let props = Object.getOwnPropertyDescriptor(obj, prop) || {configurable:true};

				if (!props["configurable"]) return;

				props["value"] = newVal;
				Object.defineProperty(obj, prop, props);

				return props;
			}

			["hardwareConcurrency", "deviceMemory"].forEach(function(hw){
				if (!settings["hardware"][hw]["enabled"]) return;

				let newValue = settings["hardware"][hw]["value"] || 4;

				doUpdateProp(frame.navigator, hw, newValue);
			});

			if (settings["hardware"]["hwVrDisplays"]["enabled"]) {
				doUpdateProp(frame.navigator, "getVRDisplays", undefined);
				doUpdateProp(frame.navigator, "activeVRDisplays", undefined);
			}

			if (settings["hardware"]["hwGamepads"]["enabled"]){
				doUpdateProp(frame.navigator, "getGamepads", undefined);
			}
		})(frame,{"enabled":true,"hardware":{"deviceMemory":{"enabled":true,"value":2},"enabled":true,"hardwareConcurrency":{"enabled":true,"value":1},"hwGamepads":{"enabled":true},"hwVrDisplays":{"enabled":true}}});
				} else {
					frame['tp_gOFoCiyXuAk_done'] = true;
					//console.log(frame);
				}
			};

			//console.log(window);
			//console.log(self);
			self['tp_gOFoCiyXuAk_func'](window);
			//self['tp_gOFoCiyXuAk_func'](self);

			["HTMLIFrameElement","HTMLFrameElement"].forEach(function(el) {
				var wind = self[el].prototype.__lookupGetter__('contentWindow'),
					cont = self[el].prototype.__lookupGetter__('contentDocument');

				Object.defineProperties(self[el].prototype,{
					contentWindow:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return wind.apply(this);

							let frame = wind.apply(this);
							if (frame) self['tp_gOFoCiyXuAk_func'](frame);

							return frame;
						}
					},
					contentDocument:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return cont.apply(this);

							let frame = cont.apply(this);
							if (frame) self['tp_gOFoCiyXuAk_func'](frame);

							return frame;
						}
					}
				});
			});</script><script xmlns="">self['tp_tOFadUGeXIn_func'] = function(frame){
				if (frame === null) {
					console.error("Frame is null");
					return;
				}

				if (!frame['tp_tOFadUGeXIn_done']) {
					(function(frame, settings) {
			var rand = function(min,max){
				return Math.floor(Math.random() * (max - min) + min);
			};
			var randArr = function(arr){
				return arr[Math.floor(Math.random() * arr.length)];
			};

			if (rand(1,3) === 2){
				settings["ctx_vendor"] = "Mozilla";
				settings["ctx_gpu"] = "Mozilla";
			}

			settings["offset"] = Math.random();

			function safeOverwrite(obj, prop, newVal){
				let props = Object.getOwnPropertyDescriptor(obj, prop);
				props["value"] = newVal;

				return props;
			}

			let changeMap = {};

			if (settings["parameters"]["enabled"]){
				let paramChanges = {
					3379:Math.pow(2,settings["parameters"]["list"]["MAX_TEXTURE_SIZE"] || 14),
					3386:Math.pow(2,settings["parameters"]["list"]["MAX_VIEWPORT_DIMS"] || 14),
					3410:Math.pow(2,settings["parameters"]["list"]["RED_BITS"] || 3),
					3411:Math.pow(2,settings["parameters"]["list"]["GREEN_BITS"] || 3),
					3412:Math.pow(2,settings["parameters"]["list"]["BLUE_BITS"] || 3),
					3413:Math.pow(2,settings["parameters"]["list"]["ALPHA_BITS"] || 3),
					3414:24,
					3415:Math.pow(2,settings["parameters"]["list"]["STENCIL_BITS"] || 3),
					6408:rand(6400,6420),
					34024:Math.pow(2,settings["parameters"]["list"]["MAX_RENDERBUFFER_SIZE"] || 14),
					30476:Math.pow(2,settings["parameters"]["list"]["MAX_CUBE_MAP_TEXTURE_SIZE"] || 14),
					34921:Math.pow(2,settings["parameters"]["list"]["MAX_VERTEX_ATTRIBS"] || 4),
					34930:Math.pow(2,settings["parameters"]["list"]["MAX_TEXTURE_IMAGE_UNITS"] || 4),
					35660:Math.pow(2,settings["parameters"]["list"]["MAX_VERTEX_TEXTURE_IMAGE_UNITS"] || 4),
					35661:randArr([128, 192, 256]),
					36347:Math.pow(2,settings["parameters"]["list"]["MAX_VERTEX_UNIFORM_VECTORS"] || 12),
					36349:Math.pow(2,rand(9,12)),

					7936:settings["ctx_vendor"] || "WebKit",
					7937:settings["ctx_gpu"] || "WebKit WebGL",
					37445:settings["debug_vendor"] || "Google Inc."
				};
				changeMap = Object.assign(changeMap, paramChanges);
			}

			// Check that GPU is defined
			if (settings["gpuList"]["enabled"]){
				changeMap[37446] = settings["gpuChose"] ? settings["gpuChose"] : ("ANGLE (" + randArr(settings["gpuList"]["list"]) + ")");
			}

			["WebGLRenderingContext", "WebGL2RenderingContext"].forEach(function(ctx){
				if (!frame[ctx]) return;

				// Modify getParameter
				let oldParam = frame[ctx].prototype.getParameter;
				Object.defineProperty(frame[ctx].prototype, "getParameter",
					safeOverwrite(frame[ctx].prototype, "getParameter",function(param){
						if (changeMap[param]) return changeMap[param];
						return oldParam.apply(this,arguments);
					})
				);

				// Modify bufferData (this updates the image hash)
				let oldBuffer = frame[ctx].prototype.bufferData;
				Object.defineProperty(frame[ctx].prototype, "bufferData",
					safeOverwrite(frame[ctx].prototype, "bufferData",function(){
						for (let i = 0;i&lt;arguments[1].length;i++){
							arguments[1][i] += settings["offset"] * 1e-3;
						}
						return oldBuffer.apply(this,arguments);
					})
				);
			});
		})(frame,{"enabled":true,"gpuList":{"enabled":true,"list":["AMD Radeon HD 6350","AMD Radeon HD 6450","AMD Radeon HD 6800 Series","AMD Radeon HD 7310 Graphics","AMD Radeon HD 7340 Graphics","AMD Radeon HD 7520G","AMD Radeon HD 7640G","AMD Radeon HD 7700 Series","AMD Radeon HD 7800 Series","AMD Radeon HD 8240","AMD Radeon R7 200 Series","AMD Radeon R7 300 Series","AMD Radeon R9 200 Series","AMD Radeon R9 300 Series","AMD Radeon R9 400 Series","AMD Radeon RX 5500 XT","AMD Radeon RX 5600 XT","AMD Radeon RX 5700 XT","AMD Radeon(TM) Vega 8 Graphics","AMD Radeon(TM) HD 6480G","AMD Radeon(TM) HD 6520G","ATI Mobility Radeon HD 4250","ATI Mobility Radeon HD 5470","ATI Mobility Radeon HD 5650","ATI Radeon HD 4200","ATI Radeon HD 4300/4500 Series","ATI Radeon HD 4600 Series","ATI Radeon HD 5470","ATI Radeon HD 5570","ATI Radeon HD 5670","Intel(R) HD Graphics","Intel(R) HD Graphics Family","Intel(R) HD Graphics 2000","Intel(R) HD Graphics 3000","Intel(R) HD Graphics 2500","Intel(R) HD Graphics 4000","Intel(R) HD Graphics 4200","Intel(R) HD Graphics 4400","Intel(R) HD Graphics 4600","Intel(R) HD Graphics 5000","Intel(R) HD Graphics 5300","Intel(R) HD Graphics 5500","Intel(R) HD Graphics 6000","Intel(R) HD Graphics 6100","Intel(R) HD Graphics 6200","Intel(R) HD Graphics 610","Intel(R) HD Graphics 615","Intel(R) HD Graphics 620","Intel(R) HD Graphics 630","Intel(R) UHD Graphics 610","Intel(R) UHD Graphics 615","Intel(R) UHD Graphics 617","Intel(R) UHD Graphics 620","Intel(R) UHD Graphics 630","Mobile Intel(R) 4 Series Express Chipset Family","Mobile Intel(R) 965 Express Chipset Family","Intel(R) Q35 Express Chipset Family","Intel(R) Q45/Q43 Express Chipset","Intel(R) Q965/Q963 Express Chipset Family","Intel(R) 4 Series Internal Chipset","Intel(R) 82945G Express Chipset Family","Intel(R) G33/G31 Express Chipset Family","Intel(R) G41 Express Chipset","Intel(R) G45/G43 Express Chipset","Intel(R) Graphics Media Accelerator 3150","Intel(R) Graphics Media Accelerator 3600 Series","Intel(R) Graphics Media Accelerator HD","NVIDIA GeForce 8400 GS","NVIDIA GeForce 9200","NVIDIA GeForce 9500 GT","NVIDIA GeForce 9800 GT","NVIDIA GeForce GT 220","NVIDIA GeForce GT 240","NVIDIA GeForce GT 430","NVIDIA GeForce GT 440","NVIDIA GeForce GT 610","NVIDIA GeForce GT 620","NVIDIA GeForce GT 630","NVIDIA GeForce GT 640","NVIDIA GeForce GTX 550 Ti","NVIDIA GeForce GTX 560","NVIDIA GeForce GTX 560 Ti","NVIDIA GeForce GTX 650","NVIDIA GeForce GTX 660","NVIDIA GeForce GTX 670","NVIDIA GeForce GTX 680","NVIDIA GeForce GTX 760","NVIDIA Quadro 4000M","NVIDIA Quadro 2000M","NVIDIA Quadro K2000M","NVIDIA Quadro K420","NVIDIA Quadro NVS 140M","NVIDIA Quadro NVS 150M","NVIDIA Quadro NVS 160M","NVIDIA GeForce GTX 960M","NVIDIA GeForce GTX 970M","NVIDIA GeForce GTX 980M","NVIDIA GeForce GTX 1050M","NVIDIA GeForce GTX 1060M","NVIDIA GeForce GTX 1070M","NVIDIA GeForce GTX 1080M","AMD Radeon HD 6350","AMD Radeon HD 6450","AMD Radeon HD 6800 Series","AMD Radeon HD 7310 Graphics","AMD Radeon HD 7340 Graphics","AMD Radeon HD 7520G","AMD Radeon HD 7640G","AMD Radeon HD 7700 Series","AMD Radeon HD 7800 Series","AMD Radeon HD 8240","AMD Radeon R7 200 Series","AMD Radeon R7 300 Series","AMD Radeon R9 200 Series","AMD Radeon R9 300 Series","AMD Radeon R9 400 Series","AMD Radeon RX 5500 XT","AMD Radeon RX 5600 XT","AMD Radeon RX 5700 XT","AMD Radeon(TM) Vega 8 Graphics","AMD Radeon(TM) HD 6480G","AMD Radeon(TM) HD 6520G","ATI Mobility Radeon HD 4250","ATI Mobility Radeon HD 5470","ATI Mobility Radeon HD 5650","ATI Radeon HD 4200","ATI Radeon HD 4300/4500 Series","ATI Radeon HD 4600 Series","ATI Radeon HD 5470","ATI Radeon HD 5570","ATI Radeon HD 5670","Intel(R) HD Graphics","Intel(R) HD Graphics Family","Intel(R) HD Graphics 2000","Intel(R) HD Graphics 3000","Intel(R) HD Graphics 2500","Intel(R) HD Graphics 4000","Intel(R) HD Graphics 4200","Intel(R) HD Graphics 4400","Intel(R) HD Graphics 4600","Intel(R) HD Graphics 5000","Intel(R) HD Graphics 5300","Intel(R) HD Graphics 5500","Intel(R) HD Graphics 6000","Intel(R) HD Graphics 6100","Intel(R) HD Graphics 6200","Intel(R) HD Graphics 610","Intel(R) HD Graphics 615","Intel(R) HD Graphics 620","Intel(R) HD Graphics 630","Intel(R) UHD Graphics 610","Intel(R) UHD Graphics 615","Intel(R) UHD Graphics 617","Intel(R) UHD Graphics 620","Intel(R) UHD Graphics 630","Mobile Intel(R) 4 Series Express Chipset Family","Mobile Intel(R) 965 Express Chipset Family","Intel(R) Q35 Express Chipset Family","Intel(R) Q45/Q43 Express Chipset","Intel(R) Q965/Q963 Express Chipset Family","Intel(R) 4 Series Internal Chipset","Intel(R) 82945G Express Chipset Family","Intel(R) G33/G31 Express Chipset Family","Intel(R) G41 Express Chipset","Intel(R) G45/G43 Express Chipset","Intel(R) Graphics Media Accelerator 3150","Intel(R) Graphics Media Accelerator 3600 Series","Intel(R) Graphics Media Accelerator HD","NVIDIA GeForce 8400 GS","NVIDIA GeForce 9200","NVIDIA GeForce 9500 GT","NVIDIA GeForce 9800 GT","NVIDIA GeForce GT 220","NVIDIA GeForce GT 240","NVIDIA GeForce GT 430","NVIDIA GeForce GT 440","NVIDIA GeForce GT 610","NVIDIA GeForce GT 620","NVIDIA GeForce GT 630","NVIDIA GeForce GT 640","NVIDIA GeForce GTX 550 Ti","NVIDIA GeForce GTX 560","NVIDIA GeForce GTX 560 Ti","NVIDIA GeForce GTX 650","NVIDIA GeForce GTX 660","NVIDIA GeForce GTX 670","NVIDIA GeForce GTX 680","NVIDIA GeForce GTX 760","NVIDIA Quadro 4000M","NVIDIA Quadro 2000M","NVIDIA Quadro K2000M","NVIDIA Quadro K420","NVIDIA Quadro NVS 140M","NVIDIA Quadro NVS 150M","NVIDIA Quadro NVS 160M","NVIDIA GeForce GTX 960M","NVIDIA GeForce GTX 970M","NVIDIA GeForce GTX 980M","NVIDIA GeForce GTX 1050M","NVIDIA GeForce GTX 1060M","NVIDIA GeForce GTX 1070M","NVIDIA GeForce GTX 1080M"]},"parameters":{"enabled":true,"list":{"ALPHA_BITS":3,"BLUE_BITS":3,"GREEN_BITS":3,"MAX_CUBE_MAP_TEXTURE_SIZE":14,"MAX_RENDERBUFFER_SIZE":14,"MAX_TEXTURE_IMAGE_UNITS":4,"MAX_TEXTURE_SIZE":13,"MAX_VERTEX_ATTRIBS":4,"MAX_VERTEX_TEXTURE_IMAGE_UNITS":4,"MAX_VERTEX_UNIFORM_VECTORS":12,"MAX_VIEWPORT_DIMS":14,"RED_BITS":3,"STENCIL_BITS":3}},"gpuChose":"ANGLE (NVIDIA GeForce GT 610 Direct3D9Ex vs_3_0 ps_3_0)"});
				} else {
					frame['tp_tOFadUGeXIn_done'] = true;
					//console.log(frame);
				}
			};

			//console.log(window);
			//console.log(self);
			self['tp_tOFadUGeXIn_func'](window);
			//self['tp_tOFadUGeXIn_func'](self);

			["HTMLIFrameElement","HTMLFrameElement"].forEach(function(el) {
				var wind = self[el].prototype.__lookupGetter__('contentWindow'),
					cont = self[el].prototype.__lookupGetter__('contentDocument');

				Object.defineProperties(self[el].prototype,{
					contentWindow:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return wind.apply(this);

							let frame = wind.apply(this);
							if (frame) self['tp_tOFadUGeXIn_func'](frame);

							return frame;
						}
					},
					contentDocument:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return cont.apply(this);

							let frame = cont.apply(this);
							if (frame) self['tp_tOFadUGeXIn_func'](frame);

							return frame;
						}
					}
				});
			});</script><script xmlns="">self['tp_jpypaVONzfp_func'] = function(frame){
				if (frame === null) {
					console.error("Frame is null");
					return;
				}

				if (!frame['tp_jpypaVONzfp_done']) {
					(function(frame, settings) {
			if (!frame.HTMLCanvasElement){
				//frame = window;
				return;
			}
			//if (!frame.HTMLCanvasElement) return;

			let rgba = [0,0,0,0];
			if (settings["customRGBA"]["enabled"]){
				rgba = settings["customRGBA"]["rgba"];
			} else {
				let rn = function(min,max){
					return Math.floor(Math.random()*(max-min)+min);
				};
				rgba = [rn(0, 3), rn(0, 3), rn(0, 3), rn(0, 2)];
			}


			var injectIframes = function(el){
				let injectionFrames = ["iframe", "frame"];
				if (injectionFrames.indexOf(el.tagName.toLowerCase()) === -1 || !el.contentWindow) return;

				if (el.contentWindow.HTMLCanvasElement) spoofExtract(el.contentWindow.HTMLCanvasElement);
				if (el.contentWindow.CanvasRenderingContext2D) spoofRender(el.contentWindow.CanvasRenderingContext2D);
				if (el.contentWindow.Document) watchDocFunctions(el.contentWindow.Document);
			};

			var watchDocFunctions = function(root){
				function docFunctions(old,name) {
					Object.defineProperty(root.prototype,name,{
						value: function() {
							let el = old.apply(this, arguments);
							if (el === null) return null;

							if (Object.prototype.toString.call(el) === '[object HTMLCollection]' ||
								Object.prototype.toString.call(el) === '[object NodeList]') {
								for (let i = 0; i &lt; el.length; ++i) {
									let elx = el[i];
									injectIframes(elx);
								}
							} else {
								injectIframes(el);
							}
							return el;
						}
					});
				}

				docFunctions(root.prototype.createElement,"createElement");
				docFunctions(root.prototype.getElementById,"getElementById");
				docFunctions(root.prototype.createElementNS,"createElementNS");
				docFunctions(root.prototype.getElementsByName,"getElementsByName");
				docFunctions(root.prototype.getElementsByTagName,"getElementsByTagName");
				docFunctions(root.prototype.getElementsByClassName,"getElementsByClassName");
				docFunctions(root.prototype.getElementsByTagNameNS,"getElementsByTagNameNS");
			};

			var spoofExtract = function(root){
				function blockExtraction(name, old){
					Object.defineProperty(root.prototype,name,{
						value:function(){
							if (this === null) return old.apply(this,arguments);

							let width = this.width;
							let height = this.height;
							let context = this.getContext("2d");

							if (context === null) return old.apply(this,arguments);

							let iData = context.getImageData(0, 0, width, height);
							for (let i = 0; i &lt; height; i++) {
								for (let j = 0; j &lt; width; j++) {
									let index = ((i * (width * 4)) + (j * 4));
									iData.data[index] 		= iData.data[index] + rgba[0];
									iData.data[index + 1] 	= iData.data[index + 1] + rgba[1];
									iData.data[index + 2] 	= iData.data[index + 2] + rgba[2];
									iData.data[index + 3] 	= iData.data[index + 3] + rgba[3];
								}
							}
							context.putImageData(iData,0,0);
							return old.apply(this,arguments);
						}
					});
				}

				blockExtraction("toDataURL", root.prototype.toDataURL);
				blockExtraction("toBlob", root.prototype.toBlob);
			};
			var spoofRender = function(root){
				let getImageData = root.prototype.getImageData;
				Object.defineProperty(root.prototype,"getImageData",{
					value:function(){
						let iData = getImageData.apply(this, arguments);
						let height = iData.height;
						let width = iData.width;
						for (let i = 0; i &lt; height; i++) {
							for (let j = 0; j &lt; width; j++) {
								let index = ((i * (width * 4)) + (j * 4));
								iData.data[index] 		= iData.data[index] + rgba[0];
								iData.data[index + 1] 	= iData.data[index + 1] + rgba[1];
								iData.data[index + 2] 	= iData.data[index + 2] + rgba[2];
								iData.data[index + 3] 	= iData.data[index + 3] + rgba[3];
							}
						}
						return iData;
					}
				});
			};

			spoofExtract(frame.HTMLCanvasElement);
			spoofRender(frame.CanvasRenderingContext2D);
			watchDocFunctions(frame.Document);
		})(frame,{"customRGBA":{"enabled":false,"rgba":[0,0,0,0]},"enabled":true});
				} else {
					frame['tp_jpypaVONzfp_done'] = true;
					//console.log(frame);
				}
			};

			//console.log(window);
			//console.log(self);
			self['tp_jpypaVONzfp_func'](window);
			//self['tp_jpypaVONzfp_func'](self);

			["HTMLIFrameElement","HTMLFrameElement"].forEach(function(el) {
				var wind = self[el].prototype.__lookupGetter__('contentWindow'),
					cont = self[el].prototype.__lookupGetter__('contentDocument');

				Object.defineProperties(self[el].prototype,{
					contentWindow:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return wind.apply(this);

							let frame = wind.apply(this);
							if (frame) self['tp_jpypaVONzfp_func'](frame);

							return frame;
						}
					},
					contentDocument:{
						get:function(){
							if (this.src &amp;&amp; this.src.indexOf('//') !== -1 &amp;&amp; location.host !== this.src.split('/')[2]) return cont.apply(this);

							let frame = cont.apply(this);
							if (frame) self['tp_jpypaVONzfp_func'](frame);

							return frame;
						}
					}
				});
			});</script>
<path d="M399.641 59.5246L215.643 388.545C211.844 395.338 202.084 395.378 198.228 388.618L10.5817 59.5563C6.38087 52.1896 12.6802 43.2665 21.0281 44.7586L205.223 77.6824C206.398 77.8924 207.601 77.8904 208.776 77.6763L389.119 44.8058C397.439 43.2894 403.768 52.1434 399.641 59.5246Z" fill="url(#paint0_linear)"/>
<path d="M292.965 1.5744L156.801 28.2552C154.563 28.6937 152.906 30.5903 152.771 32.8664L144.395 174.33C144.198 177.662 147.258 180.248 150.51 179.498L188.42 170.749C191.967 169.931 195.172 173.055 194.443 176.622L183.18 231.775C182.422 235.487 185.907 238.661 189.532 237.56L212.947 230.446C216.577 229.344 220.065 232.527 219.297 236.242L201.398 322.875C200.278 328.294 207.486 331.249 210.492 326.603L212.5 323.5L323.454 102.072C325.312 98.3645 322.108 94.137 318.036 94.9228L279.014 102.454C275.347 103.161 272.227 99.746 273.262 96.1583L298.731 7.86689C299.767 4.27314 296.636 0.855181 292.965 1.5744Z" fill="url(#paint1_linear)"/>
<defs>
<linearGradient id="paint0_linear" x1="6.00017" y1="32.9999" x2="235" y2="344" gradientUnits="userSpaceOnUse">
<stop stop-color="#41D1FF"/>
<stop offset="1" stop-color="#BD34FE"/>
</linearGradient>
<linearGradient id="paint1_linear" x1="194.651" y1="8.81818" x2="236.076" y2="292.989" gradientUnits="userSpaceOnUse">
<stop stop-color="#FFEA83"/>
<stop offset="0.0833333" stop-color="#FFDD35"/>
<stop offset="1" stop-color="#FFA800"/>
</linearGradient>
</defs>
</svg>